diff --git a/Gemfile b/Gemfile
index 40cf6e0..9af6d55 100644
--- a/Gemfile
+++ b/Gemfile
@@ -8,6 +8,7 @@ gem "graphql"
 gem "jwt"
 gem "pg"
 gem "puma", ">= 5.0"
+gem "pundit"
 gem "propshaft"
 gem "rack-cors"
 gem "tzinfo-data", platforms: %i[windows jruby]
diff --git a/Gemfile.lock b/Gemfile.lock
index 55332ca..c12c8be 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -169,6 +169,8 @@ GEM
       stringio
     puma (6.4.2)
       nio4r (~> 2.0)
+    pundit (2.3.2)
+      activesupport (>= 3.0.0)
     racc (1.7.3)
     rack (3.0.10)
     rack-cors (2.0.2)
@@ -300,6 +302,7 @@ DEPENDENCIES
   pg
   propshaft
   puma (>= 5.0)
+  pundit
   rack-cors
   rails (~> 7.1.3, >= 7.1.3.2)
   rspec
diff --git a/app/controllers/graphql_controller.rb b/app/controllers/graphql_controller.rb
index 86e5aa4..c4971b5 100644
--- a/app/controllers/graphql_controller.rb
+++ b/app/controllers/graphql_controller.rb
@@ -2,6 +2,7 @@
 
 class GraphqlController < ApplicationController
   include Dry::Monads[:result]
+
   # If accessing from outside this domain, nullify the session
   # This allows for outside API access while preventing CSRF attacks,
   # but you'll have to authenticate your user separately
diff --git a/app/graphql/errors/authorization_error.rb b/app/graphql/errors/authorization_error.rb
new file mode 100644
index 0000000..7c879cc
--- /dev/null
+++ b/app/graphql/errors/authorization_error.rb
@@ -0,0 +1,7 @@
+module Errors
+  class AuthorizationError < GraphQL::ExecutionError
+    def initialize(message)
+      super("Autorization error: #{message}")
+    end
+  end
+end
diff --git a/app/graphql/gym_trackr_context.rb b/app/graphql/gym_trackr_context.rb
index 52a4e0d..fc377ee 100644
--- a/app/graphql/gym_trackr_context.rb
+++ b/app/graphql/gym_trackr_context.rb
@@ -1,6 +1,8 @@
 # frozen_string_literal: true
 
 class GymTrackrContext < GraphQL::Query::Context
+  include Pundit::Authorization
+
   def token
     token = fetch(:token)
 
@@ -26,4 +28,11 @@ class GymTrackrContext < GraphQL::Query::Context
 
     @current_user ||= User.find(current_user_id)
   end
+
+  def authorize(record, query)
+    policy = Pundit.policy!(current_user, record)
+    raise Errors::AuthorizationError, "this #{record.class.name.downcase} is not allowed to #{query}" unless policy.public_send(query)
+
+    true
+  end
 end
diff --git a/app/graphql/helpers/authorization.rb b/app/graphql/helpers/authorization.rb
new file mode 100644
index 0000000..5ae50e1
--- /dev/null
+++ b/app/graphql/helpers/authorization.rb
@@ -0,0 +1,15 @@
+# app/graphql/resolver_helpers.rb
+module Helpers
+  module Authorization
+    extend ActiveSupport::Concern
+
+    def authenticate_user!
+      context.authenticate_user!
+    end
+
+    def authorize(record, query)
+      context.authenticate_user!
+      context.authorize(record, query)
+    end
+  end
+end
diff --git a/app/graphql/helpers/context.rb b/app/graphql/helpers/context.rb
new file mode 100644
index 0000000..895766b
--- /dev/null
+++ b/app/graphql/helpers/context.rb
@@ -0,0 +1,10 @@
+# app/graphql/resolver_helpers.rb
+module Helpers
+  module Context
+    extend ActiveSupport::Concern
+
+    def current_user
+      context.current_user
+    end
+  end
+end
diff --git a/app/graphql/mutations/.keep b/app/graphql/mutations/.keep
deleted file mode 100644
index e69de29..0000000
diff --git a/app/graphql/mutations/authentication/sign_up.rb b/app/graphql/mutations/authentication/sign_up.rb
index c354f97..5ac7144 100644
--- a/app/graphql/mutations/authentication/sign_up.rb
+++ b/app/graphql/mutations/authentication/sign_up.rb
@@ -11,17 +11,26 @@ module Mutations
       field :token, String, null: true
 
       def resolve(email:, password:, password_confirmation:, type:, referral_token: nil)
-        user = ::Authentication::SignUpService.call(email, password, password_confirmation, type, referral_token)
-        raise Errors::AuthenticationError.new(user.failure) if user.failure?
-
+        user = sign_up_user(email, password, password_confirmation, type, referral_token)
         token = generate_jwt(user)
-        {user: user.success, token: token.success}
+
+        {user: user, token: token}
       end
 
       private
 
+      def sign_up_user(email, password, password_confirmation, type, referral_token)
+        user_sign_up_result = ::Authentication::SignUpService.call(email, password, password_confirmation, type, referral_token)
+        raise Errors::SignUpError, user_sign_up_result.failure if user_sign_up_result.failure?
+
+        user_sign_up_result.success
+      end
+
       def generate_jwt(user)
-        ::Authentication::JwtToken::CreateService.call(user, expiration: 7.day.from_now.to_i)
+        jwt_creation_result = ::Authentication::JwtToken::CreateService.call(user, expiration: 7.day.from_now.to_i)
+        raise Errors::SignUpError, jwt_creation_result.failure if jwt_creation_result.failure?
+
+        jwt_creation_result.success
       end
     end
   end
diff --git a/app/graphql/mutations/base_mutation.rb b/app/graphql/mutations/base_mutation.rb
index 0ff6c4e..79e4c85 100644
--- a/app/graphql/mutations/base_mutation.rb
+++ b/app/graphql/mutations/base_mutation.rb
@@ -2,6 +2,9 @@
 
 module Mutations
   class BaseMutation < GraphQL::Schema::RelayClassicMutation
+    include Helpers::Authorization
+    include Helpers::Context
+
     argument_class Types::BaseArgument
     field_class Types::BaseField
     input_object_class Types::BaseInputObject
diff --git a/app/graphql/types/.keep b/app/graphql/types/.keep
deleted file mode 100644
index e69de29..0000000
diff --git a/app/graphql/types/query_type.rb b/app/graphql/types/query_type.rb
index e2cc906..4e597d2 100644
--- a/app/graphql/types/query_type.rb
+++ b/app/graphql/types/query_type.rb
@@ -2,6 +2,9 @@
 
 module Types
   class QueryType < Types::BaseObject
+    include Helpers::Authorization
+    include Helpers::Context
+
     field :node, Types::NodeType, null: true, description: "Fetches an object given its ID." do
       argument :id, ID, required: true, description: "ID of the object."
     end
@@ -21,11 +24,12 @@ module Types
     field :get_referral, Types::ReferralType, null: false
 
     def get_referral
-      context.authenticate_user!
-      # TO-DO: Implement policies with Pundit
-      # to check if the current_user is allowed to
-      # access the referral token (and other resources)
-      referral_token = context.current_user.authenticatable.referral_token
+      authorize(current_user, :get_referral_token?)
+
+      referral_token = current_user
+        .authenticatable
+        .referral_token
+
       {
         referral_token: referral_token.id
       }
diff --git a/app/models/user.rb b/app/models/user.rb
index 1e276d2..2a10258 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -6,4 +6,12 @@ class User < ApplicationRecord
   # TODO - Add email validation (pattern)
   validates :email, presence: true, uniqueness: true
   validates :password, presence: true, length: {minimum: 6}
+
+  def coach?
+    authenticatable_type == "Coach"
+  end
+
+  def client?
+    authenticatable_type == "Client"
+  end
 end
diff --git a/app/policies/application_policy.rb b/app/policies/application_policy.rb
new file mode 100644
index 0000000..be644fe
--- /dev/null
+++ b/app/policies/application_policy.rb
@@ -0,0 +1,53 @@
+# frozen_string_literal: true
+
+class ApplicationPolicy
+  attr_reader :user, :record
+
+  def initialize(user, record)
+    @user = user
+    @record = record
+  end
+
+  def index?
+    false
+  end
+
+  def show?
+    false
+  end
+
+  def create?
+    false
+  end
+
+  def new?
+    create?
+  end
+
+  def update?
+    false
+  end
+
+  def edit?
+    update?
+  end
+
+  def destroy?
+    false
+  end
+
+  class Scope
+    def initialize(user, scope)
+      @user = user
+      @scope = scope
+    end
+
+    def resolve
+      raise NoMethodError, "You must define #resolve in #{self.class}"
+    end
+
+    private
+
+    attr_reader :user, :scope
+  end
+end
diff --git a/app/policies/user_policy.rb b/app/policies/user_policy.rb
new file mode 100644
index 0000000..96c11a1
--- /dev/null
+++ b/app/policies/user_policy.rb
@@ -0,0 +1,5 @@
+class UserPolicy < ApplicationPolicy
+  def get_referral_token?
+    user.coach?
+  end
+end
diff --git a/spec/factories/client.rb b/spec/factories/client.rb
index affce12..7118571 100644
--- a/spec/factories/client.rb
+++ b/spec/factories/client.rb
@@ -4,5 +4,6 @@ FactoryBot.define do
     surname { "Doe" }
     phone { "654321234" }
     address { "1234 Main St" }
+    coach { create(:coach) }
   end
 end
diff --git a/spec/rails_helper.rb b/spec/rails_helper.rb
index 7b81865..fa2be3e 100644
--- a/spec/rails_helper.rb
+++ b/spec/rails_helper.rb
@@ -11,8 +11,12 @@ rescue ActiveRecord::PendingMigrationError => e
   abort e.to_s.strip
 end
 
+Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }
+
 RSpec.configure do |config|
   config.include FactoryBot::Syntax::Methods
+  config.include AuthenticationHelper, type: :request
+  config.include DryMonadsHelper
 
   config.expect_with :rspec do |expectations|
     expectations.include_chain_clauses_in_custom_matcher_descriptions = true
diff --git a/spec/requests/graphql/mutations/users/log_in_spec.rb b/spec/requests/graphql/mutations/users/log_in_spec.rb
index f23bde2..ffcd26d 100644
--- a/spec/requests/graphql/mutations/users/log_in_spec.rb
+++ b/spec/requests/graphql/mutations/users/log_in_spec.rb
@@ -18,7 +18,7 @@ RSpec.describe "GraphQL, logIn mutation", type: :request do
       before do
         create(:user, :coach, email: email, password: password)
         allow(Authentication::JwtToken::CreateService)
-          .to receive(:call).and_return(Dry::Monads::Result::Success.new("token"))
+          .to receive(:call).and_return(Success("token"))
         execute_log_in_mutation
       end
 
@@ -58,7 +58,7 @@ RSpec.describe "GraphQL, logIn mutation", type: :request do
         before do
           create(:user, :coach, email: email, password: password)
           allow(Authentication::JwtToken::CreateService)
-            .to receive(:call).and_return(Dry::Monads::Result::Failure.new("token error"))
+            .to receive(:call).and_return(Failure("token error"))
         end
 
         it "returns an error" do
diff --git a/spec/requests/graphql/mutations/users/sign_up_spec.rb b/spec/requests/graphql/mutations/users/sign_up_spec.rb
index bf0bfad..b7fad88 100644
--- a/spec/requests/graphql/mutations/users/sign_up_spec.rb
+++ b/spec/requests/graphql/mutations/users/sign_up_spec.rb
@@ -1,6 +1,8 @@
 require "spec_helper"
 
 RSpec.describe "GraphQL, signUp mutation", type: :request do
+  include DryMonadsHelper
+
   subject(:execute_sign_up_mutation) do
     post "/graphql", params: {
       query: mutation(
@@ -21,7 +23,7 @@ RSpec.describe "GraphQL, signUp mutation", type: :request do
   context "happy path" do
     before do
       allow(Authentication::JwtToken::CreateService)
-        .to receive(:call).and_return(Dry::Monads::Result::Success.new("token"))
+        .to receive(:call).and_return(Success("token"))
       execute_sign_up_mutation
     end
 
@@ -73,7 +75,7 @@ RSpec.describe "GraphQL, signUp mutation", type: :request do
 
         it "returns an error" do
           expect(response.parsed_body.dig("errors").first.dig("message"))
-            .to eq("Authentication error: [\"Email has already been taken\"]")
+            .to eq("[\"Email has already been taken\"]")
         end
       end
 
@@ -85,7 +87,7 @@ RSpec.describe "GraphQL, signUp mutation", type: :request do
 
         it "returns an error" do
           expect(response.parsed_body.dig("errors").first.dig("message"))
-            .to eq("Authentication error: [\"Password is too short (minimum is 6 characters)\"]")
+            .to eq("[\"Password is too short (minimum is 6 characters)\"]")
         end
       end
 
@@ -96,7 +98,7 @@ RSpec.describe "GraphQL, signUp mutation", type: :request do
 
         it "returns an error" do
           expect(response.parsed_body.dig("errors").first.dig("message"))
-            .to eq("Authentication error: [\"Password confirmation doesn't match Password\"]")
+            .to eq("[\"Password confirmation doesn't match Password\"]")
         end
       end
     end
@@ -109,7 +111,7 @@ RSpec.describe "GraphQL, signUp mutation", type: :request do
 
         it "returns an error" do
           expect(response.parsed_body.dig("errors").first.dig("message"))
-            .to eq("Authentication error: Referral token is required for Client type")
+            .to eq("Referral token is required for Client type")
         end
       end
 
@@ -120,7 +122,7 @@ RSpec.describe "GraphQL, signUp mutation", type: :request do
 
         it "returns an error" do
           expect(response.parsed_body.dig("errors").first.dig("message"))
-            .to eq("Authentication error: Invalid referral token")
+            .to eq("Invalid referral token")
         end
       end
     end
diff --git a/spec/requests/graphql/queries/get_referral_spec.rb b/spec/requests/graphql/queries/get_referral_spec.rb
new file mode 100644
index 0000000..cffcd01
--- /dev/null
+++ b/spec/requests/graphql/queries/get_referral_spec.rb
@@ -0,0 +1,48 @@
+require "spec_helper"
+
+RSpec.describe "GraphQL, get_referral Query", type: :request do
+  subject(:execute_get_referal_query) do
+    post "/graphql", params: {query: query}, headers: {Authorization: "Bearer token"}
+  end
+
+  context "when the user is a coach" do
+    let(:user) { create(:user, :coach) }
+    let(:coach) { user.authenticatable }
+    let!(:referral_token) { create(:referral_token, coach: coach) }
+
+    before do
+      authenticate_user(user)
+      execute_get_referal_query
+    end
+
+    it "returns the referral token" do
+      expect(response.parsed_body.dig("data", "getReferral")).to eq({
+        "referralToken" => referral_token.id
+      })
+    end
+  end
+
+  context "when the user is a client" do
+    let(:user) { create(:user, :client) }
+
+    before do
+      authenticate_user(user)
+      execute_get_referal_query
+    end
+
+    it "returns the referral token" do
+      expect(response.parsed_body.dig("errors").first.dig("message"))
+        .to eq("Autorization error: this user is not allowed to get_referral_token?")
+    end
+  end
+
+  def query
+    <<~GQL
+      query {
+        getReferral {
+          referralToken
+        }
+      }
+    GQL
+  end
+end
diff --git a/spec/support/authentication_helper.rb b/spec/support/authentication_helper.rb
new file mode 100644
index 0000000..500238f
--- /dev/null
+++ b/spec/support/authentication_helper.rb
@@ -0,0 +1,7 @@
+module AuthenticationHelper
+  def authenticate_user(user)
+    allow(Authentication::JwtToken::DecoderService)
+      .to receive(:call)
+      .and_return(Dry::Monads::Result::Success.new({"valid_for" => "authentication", "user_id" => user.id}))
+  end
+end
diff --git a/spec/support/dry_monads_helper.rb b/spec/support/dry_monads_helper.rb
new file mode 100644
index 0000000..8969e85
--- /dev/null
+++ b/spec/support/dry_monads_helper.rb
@@ -0,0 +1,7 @@
+module DryMonadsHelper
+  extend ActiveSupport::Concern
+
+  included do
+    include Dry::Monads[:result]
+  end
+end
